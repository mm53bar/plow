#!/usr/bin/env bash

set -e

###############################################################################
#                              START OF ROVER
#
# These are shared functions used by pave and plow to interact with EC2.
#
###############################################################################

# Get the IP address of a server given it's Amazon EC2 instance name
#
# $1 = EC2 instance id
get_instance_ip() {
  local INSTANCE_ID=$1
  local DESCRIBE_INSTANCE=$(ec2-describe-instances --filter "instance-state-name=running" $INSTANCE_ID)

  local IP_ADDR=$(echo "$DESCRIBE_INSTANCE" | grep "NIC\s" | cut -f 7)
  if [ ! $IP_ADDR ]; then
    # We're running without a subnet
    local IP_ADDR=$(echo "$DESCRIBE_INSTANCE" | grep "INSTANCE" | cut -f 17)
  fi

  echo $IP_ADDR
}

# Wait for EC2 to complete provisioning a new instance before continuing.
wait_for_instance_to_be_provisioned() {
  local INSTANCE_NAME=$1

  local TOTAL_TIME=0
  local MAX_TIME=181
  while [ $MAX_TIME -gt $TOTAL_TIME ] && ! ec2-describe-instances $INSTANCE_NAME | grep -q "running"
  do
    TOTAL_TIME=$(( $TOTAL_TIME + 5 ))
    echo "$INSTANCE_NAME not running. Waiting 5 seconds before checking again..."
    sleep 5s
  done

  if [ $MAX_TIME -lt $TOTAL_TIME ]; then
    bail "Instance $INSTANCE_NAME is taking too long to enter the running state. Exiting..."
  fi
}

###############################################################################
#                               END OF ROVER
###############################################################################

function usage()
{
  echo
  echo "$(basename $0) runs recipes on your servers"
  echo
  echo "usage: $(basename $0) [staging | production] [role rolename] [sudo] [user username] commands | [--help]"
  echo
  echo "       commands           : list of recipes that you want to execute"
  echo "                          :   e.g. postgres nginx rails"
  echo "                          :   (should correspond to recipes in Plowfile)"
  echo "       staging            : use .env.staging for configuration"
  echo "       production         : use .env.production for configuration"
  echo "       user               : specify a user that overrides \$DEPLOYER"
  echo "       role               : use role when choosing destination servers"
  echo "       sudo               : run all commands as sudo"
  echo "       --help             : displays the information you're reading now"
  echo
}

declare -a commands
declare -a env_variables

if test $# = 0; then
  usage
  exit 64 # EX_USAGE - The command was used incorrectly
fi

while test $# != 0; do
  case "$1" in
    --staging|staging)
      ENVIRONMENT=staging
      ;;
    --production|production)      
      ENVIRONMENT=production
      ;;
    --role|role)
      shift
      ROLE=$1
      ;;
    --sudo|sudo)
      SUDO=sudo
      ;;
    --user|user)
      shift
      OVERRIDE_USER=$1
      ;;
    --*)
      env_variables[${#env_variables[@]}]=${1:2}
      ;;      
    --help|--usage|help|usage)
      usage
      exit
      ;;
    *)
      commands[${#commands[@]}]="$1"
      ;;
  esac
  shift
done

recipe() {
  if command -v wget > /dev/null; then 
    wget -nc -q -P .plow $1
  else
    bail "wget not installed: brew install wget"
  fi 
}

bail() {
  echo -e "\033[31m  failed: $1\033[0m"
  exit 1
}

if [ ! $ENVIRONMENT ]; then
  echo "Assuming staging environment..."
  ENVIRONMENT="staging"
fi

ENV_FILE=.env.$ENVIRONMENT
[[ -f $ENV_FILE ]] || bail "no $ENV_FILE found"
source $ENV_FILE

mkdir -p .plow && cat $ENV_FILE > .plow/plow.sh

for env_variable in "${env_variables[@]}"
do
  echo "$env_variable" >> .plow/plow.sh
done

if [ $SERVER ]; then
  SERVERS[${#SERVERS[@]}]=$SERVER
else
  TAG=${PWD##*/}
  [[ $ROLE ]] && TAG+="_$ROLE"
  TAG+="_$ENVIRONMENT"

  DESCRIBE_TAG=$(ec2-describe-tags --filter "key=Name" --filter "value=$TAG")
  [[ $DESCRIBE_TAG ]] || bail "no target server found matching '$TAG'"
  INSTANCE_NAMES=($(echo "${DESCRIBE_TAG}" | grep TAG | awk {'print $3'}))

  for instance in ${INSTANCE_NAMES[@]}; do 
    SERVERS[${#SERVERS[@]}]=$(get_instance_ip $instance)
  done
fi

if [ ${#commands[@]} == '0' ]; then
  bail "No recipes specified"
else
  source Plowfile
  for i in "${RECIPES[@]}"
  do
    recipe $i
  done  
  for command in "${commands[@]}"
  do
    command_file=$(find .plow -type f \( -name "$command" -or -name "$command.sh" \))
    [[ -f $command_file ]] || bail "Recipe '$command' not found"
    {
      echo
      echo "echo -e '\033[1;33m== Processing recipe: $command\033[0m'"
      cat $command_file
    }  >> .plow/plow.sh
  done  
fi

[[ $OVERRIDE_USER ]] && DEPLOYER=$OVERRIDE_USER

[[ ${FILES[@]} ]] && mkdir -p .plow/files && cp ${FILES[@]} .plow/files/ && cd .plow
for server in ${SERVERS[@]}; do
  echo -e "\033[1;35m== Plowing $server\033[0m"
  tar cz . | ssh -o ConnectTimeout=120 $DEPLOYER@$server "rm -rf plow && mkdir plow && cd plow && tar xz && $SUDO bash plow.sh"
done
